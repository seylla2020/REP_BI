CALL MP_MPB.DROP_TABLE_IF_EXISTS('MP_MPB','ACC_MOV_HISTORY_TEMP',MSG);
CREATE MULTISET TABLE MP_MPB.ACC_MOV_HISTORY_TEMP AS (
SELECT
			M.CUS_CUST_ID,
			M.CUS_CUST_ID_SEL,
			M.CUS_CUST_ID_BUY,
			M.MOV_MOVE_ID,
      M.PAY_PAYMENT_ID,
			M.MOV_CREATED_DT,	
			M.MOV_DETAIL,
			M.MOV_TYPE_ID,	
			M.PAY_OPERATION_TYPE_ID,
			M.MOV_FINANCIAL_ENTITY_ID,	
			M.WIT_WITHDRAW_ID,
			M.MOV_AMOUNT,
      CAST(NULL AS VARCHAR(255)) AS OFICIO_NUMBER,
      CAST(NULL AS VARCHAR(255)) AS OFICIO_CREATED_AT
FROM WHOWNER.BT_MP_ACC_MOVEMENTS AS M
WHERE 1=1
			AND M.CUS_CUST_ID in (SELECT DISTINCT CUS_CUST_ID FROM MP_MPB.DOC_INPUT_MATCH WHERE CREATED_AT = (SELECT MAX(CREATED_AT) FROM MP_MPB.DOC_INPUT))
			AND M.SIT_SITE_ID = 'MLB' 
			AND M.MOV_CREATED_DT BETWEEN (SELECT MIN(RANGE_MIN) AS RANGE_MIN FROM MP_MPB.DOC_INPUT_MATCH WHERE CREATED_AT = (SELECT MAX(CREATED_AT) FROM MP_MPB.DOC_INPUT)) AND (SELECT MAX(RANGE_MAX) AS RANGE_MIN FROM MP_MPB.DOC_INPUT_MATCH WHERE CREATED_AT = (SELECT MAX(CREATED_AT) FROM MP_MPB.DOC_INPUT))
			AND M.MOV_LABEL IN ('["bacen_available"]', '[]') -- para pegar apenas os aprovados
) WITH DATA PRIMARY INDEX (CUS_CUST_ID, CUS_CUST_ID_BUY, CUS_CUST_ID_SEL);


CALL MP_MPB.DROP_TABLE_IF_EXISTS('MP_MPB','ACC_MOV_HISTORY',MSG);
CREATE MULTISET TABLE MP_MPB.ACC_MOV_HISTORY AS (
SELECT
A.*,
P.pay_reason_id
FROM MP_MPB.ACC_MOV_HISTORY_TEMP A
LEFT JOIN WHOWNER.bt_mp_pay_payments P ON P.PAY_PAYMENT_ID = A.PAY_PAYMENT_ID AND p.sit_site_id = 'MLB'
) WITH DATA PRIMARY INDEX (CUS_CUST_ID, CUS_CUST_ID_BUY, CUS_CUST_ID_SEL);